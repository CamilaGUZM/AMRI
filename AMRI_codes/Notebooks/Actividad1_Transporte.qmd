---
title: "Actividad1_Transporte"
author: "Camila"
format:
   html:
     toc: true
     html-math-method: katex
     embed-resources: true
     self-contained-math: true
     df-print: kable
editor: source
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

```{r}
#| eval: false
install.packages("bnlearn")
```

```{r}
library(bnlearn)
```

You can add options to executable code like this

```{r}
data = read.csv("../data/survey.csv", stringsAsFactors = TRUE)
head(data)
```

Crear DAG vacía

```{r}
dag = empty.graph(nodes = c("A", "S", "E", "O", "R", "T"))
```

-   Definir las relaciones con una matriz.

```{r}
arc_set = matrix(c("A", "E", 
                   "S", "E",
                   "E", "O",
                   "E", "R",
                   "O", "T",
                   "R", "T"), byrow = TRUE, ncol = 2,
                 dimnames = list(NULL, c("from", "to")))

```

## **Creando la DAG**

-   La primera columna define el nodo padre y la segunda el hijo.

```{r}
arc_set
```

-   Creamos los arcos de la DAG con la función `arc()`.

```{r}
arcs(dag) = arc_set
```

objeto resultante

```{r}
dag
```

## **Estimando los parámetros**

-   Utilizamos el método de máxima verosimilitud (MLE) para estimar los parámetros de nuestra DAG.

```{r}
bn_mle = bn.fit(dag, data = data, method = "mle")
```

-   Para acceder a las probabilidades condicionales usamos el operador `$` y el nombre del nodo.

-   Obtenemos las probabilidades condicionales del nodo de educación.

```{r}
bn_mle$E
```

```{r}
bn_mle$A
```

```{r}
bn_mle$O
```
