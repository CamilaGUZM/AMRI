---
title: "Ensanut"
format: html
editor: visual
---

# **Motivación: Detección de diabetes**

La diabetes mellitus es una afección en la que los niveles de glucosa en sangre son demasiado altos y no se pueden controlar por la falta de una hormona llamada insulina. Según la causa, se clasifica en diabetes Tipo 1 y Tipo 2. En los últimos años, su prevalencia mundial ha aumentado y continúa siendo un foco de atención en México debido al aumento en la población con sobrepeso y problemas cardiovasculares.

# Objetivo:

Entrenar al Naive Bayes

# Abrir librería

```{r}
library(tidyverse)
```

-   Como los datos no son un archivo `.csv` común, los cargamos usando la función `read_delim()` y especificando el tipo de delimitador.

# Abrir DataSet

```{r}
diabetes = read_delim("../data/ensanut2020_diabetes.csv", delim = ";")
head(diabetes)
```

```{r}
install.packages("janitor")
```

```{r}
library(janitor)
```

# Hacer Clasificador

## Limpiar Datos

-   *Limpiamos* los nombres de las columnas con la función `clean_names()`.

```{r}
diabetes = diabetes |>
            clean_names() #el paréntesis es para indicar que es para todos los datos
```

```{r}
glimpse(diabetes)
```

-   La variable `h0902a` es la que nos da información sobre el estatus de la persona.

-   Valores iguales a 1 identifican personas con diabetes, mientras que valores iguales a 9 a personas sanas.

## Creación de Variable objetivo

-   Vamos a crear una variable con el diagnóstico, esta será nuestra variable objetivo.

```{r}
data = diabetes |>
        mutate(dx = case_when(h0902a  == 1 ~ "diabetes",
                                   h0902a == 9 ~ "no_diabetes")) #es un if, si pasallamale "diabetes" si no, ps no
```

## Filtrar Variables Características

-   Seleccionamos el diagnóstico, sexo, edad y los valores de la química sanguínea.

```{r}
data = data |>
        select(sexo, edad , dx, contains("valor"))

head(data)
```

### Limpieza

-   Nos quedamos sólo con los datos completos para la variable `dx`.

```{r}
data = data |>
        filter(!is.na(dx)) #dropna; verifica si dx son na o no
```

-   Notamos que existen algunos problemas con los tipos de dato en nuestras variables.

```{r}
glimpse(data) 
```

hay datos con , se necesita cambiar la , por un punto .

-   Debido a que los datos de la química sanguínea tienen una coma, R los identifica como caracteres.

-   Reemplazamos la coma por un punto decimal y convertimos los datos a numéricos con ayuda de las funciones `as.numeric()` y `str_replace()`.

```{r}
data = data |> mutate(across(contains("valor"), ~ as.numeric(str_replace(., "," , "\\.")))) # across aplica lo que está del primer argumento a todo lo del lado derecho
# hace numerico(. --> tomar toda la lista de variables, "\\." --> representa el caracter tal cual .)

```

```{r}
glimpse(data)
```

```{r}
install.packages("tidymodels")
```

```{r}
library(tidymodels)
```

## Dividir Sets

-   vamos a dividir datos

    -   training

    -   test

-   Usamos la función `initial_split()` que es similar al `train_test_split()` de Python.

```{r}
set.seed(1234)
diabetes_split = initial_split(data, prop = 0.7)
```

```{r}
diabetes_train = training(diabetes_split)
diabetes_test = testing(diabetes_split)
```

-   Instalamos el paquete `e1071` donde está implementado el clasificador naïve Bayes.

```{r}
install.packages("e1071")
```

## Ajustar Clasificador a Training

```{r}
library(e1071)
```

-   La función `naiveBayes()` implementa este clasificador usando una distribución normal para las variables numéricas.

Formula $y \sim x$

va a ser $dx \sim .$

```{r}
NB_cl = naiveBayes(dx ~ . , data = diabetes_train)


```

## Predecir

```{r}
y_pred = predict(NB_cl, newdata = diabetes_test)
```

### Matriz confusion

-   Construimos la matriz de confusión.

```{r}
cm = table(diabetes_test$dx, y_pred)
```

diag = true positives true neg

$$
accuracy = \frac{TP +TN}{TOTAL}
$$

```{r}
sum(diag(cm))/ sum(cm)

```

# HASTA AQUÍ EXAMEN

------------------------------------------------------------------------
